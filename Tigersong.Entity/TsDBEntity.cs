//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a Tigersong Template.
//
//     DO NOT MODIFY contents of this file. Changes to this
//     file will be lost if the code is regenerated.
//     Author:Haibin Jiang
// </autogenerated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

using System.Data.Entity;
using System.Data.Entity.Infrastructure.Interception;

using Tigersong.Model;
using Tigersong.Common;

/// <summary>
/// 
/// </summary>
namespace Tigersong.Entity
{
    /// <summary>
    /// 
    /// </summary>
    public class TsDBEntity :  DbContext
    {
        private string tablePrefix;//数据库表名前缀

        /// <summary>
        /// 
        /// </summary>
        static TsDBEntity()
        {
            Database.SetInitializer<TsDBEntity>(null);
            //添加Ef拦截器
            DbInterception.Add(new SqlLogInterceptor());
        }

        /// <summary>
        ///您的上下文已配置为从您的应用程序的配置文件(App.config 或 Web.config)
        ///使用“TsDBEntity”连接字符串。默认情况下，此连接字符串针对您的 LocalDb 实例上的
        ///“Tigersong.Entity.TsDBEntity”数据库。
        /// 
        /// 如果您想要针对其他数据库和/或数据库提供程序，请在应用程序配置文件中修改“TsDBEntity”
        /// 连接字符串。 
        /// </summary>
        public TsDBEntity() : base("name=TsDBEntity")
        {
            tablePrefix = ConfigHelper.GetCfgSetting("TablePrefix");
        }

        //为您要在模型中包含的每种实体类型都添加 DbSet。有关配置和使用 Code First  模型
        //的详细信息，请参阅 http://go.microsoft.com/fwlink/?LinkId=390109。        

        /// <summary>
        /// 
        /// </summary>
        public virtual DbSet<User> Users { get; set; }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="modelBuilder"></param>
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            modelBuilder.Entity<User>().ToTable(tablePrefix + "User").HasKey(m => m.UserId);
        }
    }
}
