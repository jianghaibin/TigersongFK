//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a Tigersong Template.
//
//     DO NOT MODIFY contents of this file. Changes to this
//     file will be lost if the code is regenerated.
//     Author:Haibin Jiang
// </autogenerated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

using System.Reflection;

namespace Tigersong.AOPProxy
{
    /// <summary>
    /// 启动拦截注入
    /// </summary>
    public static class InterceptionInit
    {
        /// <summary>
        /// 根据注入类型获取目标委托类型
        /// </summary>
        /// <param name="interceptionType"></param>
        /// <returns></returns>
        private static Type GetDelegateType(InterceptionType interceptionType)
        {
            Type type = null;
            switch (interceptionType)
            {
                case InterceptionType.OnEntry:
                    {
                        type = typeof(AOPDelegate.OnEntry);
                        break;
                    }
                case InterceptionType.OnExit:
                    {
                        type = typeof(AOPDelegate.OnExit);
                        break;
                    }
                case InterceptionType.OnSuccess:
                    {
                        type = typeof(AOPDelegate.OnSuccess);
                        break;
                    }
                case InterceptionType.OnException:
                    {
                        type = typeof(AOPDelegate.OnException);
                        break;
                    }
                case InterceptionType.OnLogException:
                    {
                        type = typeof(AOPDelegate.OnLogException);
                        break;
                    }
            }
            return type;
        }
        /// <summary>
        /// 启动拦截
        /// </summary>
        public static void Init()
        {
            //加载的程序集
            IEnumerable<Assembly> assemblies =
                from item in AppDomain.CurrentDomain.GetAssemblies()
                where (item.FullName.StartsWith("System.") ? false : !item.FullName.StartsWith("Microsoft."))
                select item;
            //待注入的方法
            List<Type> types = new List<Type>();
            foreach (Assembly assembly in assemblies)
            {
                IEnumerable<Type> typeAssembly =
                    from item in assembly.GetTypes()
                    where IsSubClassOf(item, "IAOPInterception")
                    select item;
                types.AddRange(typeAssembly);
            }
            //注入方法
            foreach (Type type in types)
            {
                MethodInfo[] methods = type.GetMethods(BindingFlags.DeclaredOnly | BindingFlags.Static | BindingFlags.Public);
                for (int i = 0; i < methods.Length; i++)
                {
                    MethodInfo methodInfo = methods[i];
                    Attribute customAttribute = methodInfo.GetCustomAttribute(typeof(Interception));
                    if (customAttribute != null)
                    {
                        Interception interception = (Interception)customAttribute;
                        Type delegateType = GetDelegateType(interception.Type);
                        Delegate @delegate = Delegate.CreateDelegate(delegateType, methodInfo);
                        DelegateContainer.AddHandle(interception.TargetType.FullName, interception.TargetMethodName, interception.Type, @delegate);
                    }
                }
            }
        }
        /// <summary>
        /// 是否是拦截注入的方法
        /// </summary>
        /// <param name="type"></param>
        /// <param name="interfaceName"></param>
        /// <returns></returns>
        private static bool IsSubClassOf(Type type, string interfaceName)
        {
            return type.GetInterface(interfaceName) != null;
        }
    }
}
