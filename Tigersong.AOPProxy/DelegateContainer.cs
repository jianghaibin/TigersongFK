//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a Tigersong Template.
//
//     DO NOT MODIFY contents of this file. Changes to this
//     file will be lost if the code is regenerated.
//     Author:Haibin Jiang
// </autogenerated>
//------------------------------------------------------------------------------
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Tigersong.AOPProxy
{
	/// <summary>
	/// 委托容器及相关操作
	/// </summary>
	internal class DelegateContainer
	{
		/// <summary>
		/// 委托容器
		/// </summary>
		private static Hashtable eventHandles;

		static DelegateContainer()
		{
			DelegateContainer.eventHandles = new Hashtable();
		}

		public DelegateContainer()
		{
		}

		/// <summary>
		/// 添加执行前调用方法
		/// </summary>
		/// <param name="typeName">类型名称</param>
		/// <param name="targetMethodName">待注入至的目标方法</param>
		/// <param name="handleType">注入方法的类型</param>
		/// <param name="handle"></param>
		public static void AddHandle(string typeName, string targetMethodName, InterceptionType handleType, object handle)
		{
			string str = string.Format("{0}${1}${2}", typeName, targetMethodName, handleType.ToString());
			DelegateContainer.eventHandles[str] = handle;
		}

		/// <summary>
		/// 获取执行前调用方法
		/// </summary>
		/// <param name="typeName">待注入至的目标方法</param>
		/// <param name="targetMethodName">注入方法的类型</param>
		/// <param name="handleType"></param>
		/// <returns></returns>
		public static object GetHandle(string typeName, string targetMethodName, InterceptionType handleType)
		{
			string str = string.Format("{0}${1}${2}", typeName, targetMethodName, handleType.ToString());
			return DelegateContainer.eventHandles[str];
		}
	}
}
